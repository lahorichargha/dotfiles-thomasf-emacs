#!/bin/bash
#
# This is my personal el-get-like bash script to manage my vendor dirs statically.
#  I still use el-get for recepie reference https://github.com/dimitri/el-get
#
set -e

REPOS=~/.cache/emacs-user-cache/repos
VENDOR=site-lisp/shared
THEMES=themes
mkdir -p $REPOS

prepareVars() {
  [ -n "${name}" ] || name=$(basename "${url}")
}

# Execute one command inside a repository
inRepo() {
  prepareVars
  (
    cd ${REPOS}/${name}
    $*
  )
}

# Transfer an repository to vendor dir
installRepo() {
  prepareVars
  target="${loadPath}/${name}/${category}${category:+/}"
  mkdir -p "${target}"
  repo="${REPOS}/${name}/${subtree}"
  rsync -a --delete \
    --exclude="*-pkg.el" \
    --exclude="*-tests.el" \
    --exclude="*.elc" \
    --exclude="*.mk" \
    --exclude="*.spec" \
    --exclude="*.spec.in" \
    --exclude="*.texi" \
    --exclude=".dir-locals.el" \
    --exclude=".git/" \
    --exclude=".gitignore" \
    --exclude=".gitmodules" \
    --exclude=".gitmodules/" \
    --exclude=".hgignore" \
    --exclude=".travis.yml" \
    --exclude="50magit.el" \
    --exclude="AUTHORS" \
    --exclude="CHANGELOG" \
    --exclude="CONTRIBUTING.md" \
    --exclude="COPYING" \
    --exclude="COPYING.FDL" \
    --exclude="COPYING.GPLv3" \
    --exclude="Carton" \
    --exclude="Cask" \
    --exclude="ChangeLog" \
    --exclude="INSTALL" \
    --exclude="LICENSE" \
    --exclude="LICENSE" \
    --exclude="Makefile" \
    --exclude="Makefile.am" \
    --exclude="NEWS" \
    --exclude="NEWS.org" \
    --exclude="README.*" \
    --exclude="Rakefile" \
    --exclude="TODO" \
    --exclude="TODO.txt" \
    --exclude="UNLICENSE" \
    --exclude="autogen.sh" \
    --exclude="configure.ac" \
    --exclude="demo/" \
    --exclude="developer-tools/" \
    --exclude="dict/" \
    --exclude="doc/" \
    --exclude="env/" \
    --exclude="extras/bundles/" \
    --exclude="extras/imported/" \
    --exclude="features/" \
    --exclude="html-help/" \
    --exclude="html/" \
    --exclude="info-help/" \
    --exclude="org-install.el~" \
    --exclude="org-version.el~" \
    --exclude="pkg/" \
    --exclude="run-tests.sh" \
    --exclude="run-travis-ci.sh" \
    --exclude="snippets/" \
    --exclude="test/" \
    --exclude="testing/" \
    --exclude="tests/" \
    --exclude="todo.org" \
    --exclude="elnode/examples/" \
    --exclude="elnode/manual/" \
    --exclude="emacs-epc/images/" \
    --exclude="watch-tests.watchr" \
    "${repo}" "${target}"
}

# Clone or update a git repository
getGit() {
  prepareVars
  repo="${REPOS}/${name}"
  if [ -d "$repo" ]; then
    (
      cd ${repo}
      git pull -q --force
    )
  else
    git clone -q "$url" "${repo}"
  fi
}

# Get single file by http
getFile() {
  prepareVars
  target="${REPOS}/${name}"
  curl -s -k -L "$url" -o "${target}"
}

# Copy single file to loadPath target
installFile() {
  filename=""
  [ ! -z ${1} ] && filename="/$1"
  prepareVars
  mkdir -p "${loadPath}/${category}"
  cp -f "${REPOS}/${name}" "${loadPath}/${category}"
}

#
# Unset or set all manifest variables to default
#
#
unset subtree # subtree of repository to copy
unset name # local file/dir name for vendor lib
unset url # remote file (http://some.url/file)
loadPath="${VENDOR}" # where to install
unset category # category folder to put downloads

#
# And the "recipies", all async, all at once.
#

########################################################################
# Misc


( name=org-sync; url=git://orgmode.org/org-sync.git
  getGit && installRepo ) &

( name=org-caldav; url=https://github.com/dengste/org-caldav
  getGit && installRepo ) &

( url=https://raw.github.com/jwiegley/ido-hacks/master/ido-hacks.el
  getFile && installFile ) &

( url=http://www.cx4a.org/pub/auto-complete-ruby.el
  getFile && installFile ) &

( loadPath=themes; url=https://raw.github.com/bbatsov/zenburn-emacs/master/zenburn-theme.el
  getFile && installFile ) &

( url=https://raw.github.com/bbatsov/solarized-emacs/master/solarized.el
  getFile && installFile ) &

( url=https://raw.github.com/bbatsov/solarized-emacs/master/solarized-theme-utils.el
  getFile && installFile ) &

( loadPath=themes; url=https://raw.github.com/bbatsov/solarized-emacs/master/solarized-dark-theme.el
  getFile && installFile ) &

( loadPath=themes; url=https://raw.github.com/bbatsov/solarized-emacs/master/solarized-light-theme.el
  getFile && installFile ) &

( url=https://raw.github.com/sellout/emacs-color-theme-solarized/master/solarized-definitions.el
  getFile && installFile ) &

( loadPath=lib; url=https://raw.github.com/rocky/emacs-test-simple/master/test-simple.el
  getFile && installFile ) &

( url=https://raw.github.com/lewang/le_emacs_MRU_yank/master/MRU-yank.el
  getFile && installFile ) &

( url=https://raw.github.com/lewang/delim-pad/master/delim-pad.el
  getFile && installFile ) &

( url=https://raw.github.com/lewang/ws-butler/master/ws-butler.el
  getFile && installFile ) &

( url=https://raw.github.com/lewang/le_emacs_whole_line_funcs/master/whole-line-funcs.el
  getFile && installFile ) &

( url=https://raw.github.com/renard/indicate-change/master/indicate-changes.el
  getFile && installFile ) &

( url=https://raw.github.com/sigma/el-x/master/lisp/dflet.el
  getFile && installFile ) &

#############################
# NO melpa/elpa candidates? #
#############################

( url=http://www.emacswiki.org/emacs/download/linkd.el
  getFile && installFile ) &

( url=http://www.emacswiki.org/emacs/download/desktop-menu.el
  getFile && installFile ) &

( url=https://raw.github.com/lewang/le_emacs_libs/master/keep-buffers.el
  getFile && installFile ) &


echo "Verify changes using git + ./compile + maybe ./profile !"

# Local Variables:
# fill-column: 110
# End:
